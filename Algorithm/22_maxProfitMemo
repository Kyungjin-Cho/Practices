def max_profit_memo(price_list, count, cache):
    # base case (0개 또는 1개인 경우)
    if count < 2:
        cache[count] = price_list[count]
        return price_list[count]
        
    # recursive case
    # 이미 cache[i] 존재하는 경우
    if count in cache:
        return cache[count]
    
    # cache[i] 존재하지 않는 경우
    if count < len(price_list):
        # 최대 수익 저장 변수 profit
        profit = price_list[count]
    else:
        profit = 0
    
    # count개를 팔 수 있는 조합 비교
    for i in range(1, count // 2 + 1):
        profit = max(profit, max_profit_memo(price_list, i, cache) 
                 + max_profit_memo(price_list, count - i, cache))
    
    # profit을 cache에 저장
    cache[count] = profit
    
    # profit 리턴
    return profit 
    

    
def max_profit(price_list, count):
    max_profit_cache = {}

    return max_profit_memo(price_list, count, max_profit_cache)


# 테스트
print(max_profit([0, 100, 400, 800, 900, 1000], 5))
print(max_profit([0, 100, 400, 800, 900, 1000], 10))
print(max_profit([0, 100, 400, 800, 900, 1000, 1400, 1600, 2100, 2200], 9))
