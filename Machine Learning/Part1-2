▶ Software Engineering Practices Part 2
: Testing, Logging, Code reviews

1. Testing
● Testing your code is essential before deployment. It helps you catch errors and faulty conclusions before they make any major impact.
● Problems that could occur in data science aren’t always easily detectable. To catch these errors, you have to check for the quality and accuracy of your analysis in addition to the quality of your code
● TEST DRIVEN DEVELOPMENT: a development process where you write tests for tasks before you even write the code to implement those tasks.
● UNIT TEST: a type of test that covers a “unit” of code, usually a single function, independently from the rest of the program.

2. Unit Test
● The advantage of unit tests is that they are isolated from the rest of your program, and thus, no dependencies are involved. 
● They don't require access to databases, APIs, or other external sources of information.
● Passing unit tests isn’t always enough to prove that our program is working successfully.
● To show that all the parts of our program work with each other properly, communicating and transferring data between them correctly, we use integration tests.
● To install pytest, run pip install -U pytest in your terminal. You can see more information on getting started here.
- Create a test file starting with test_
- Define unit test functions that start with test_ inside the test file
- Enter pytest into your terminal in the directory of your test file and it will detect these tests for you

3. Test Driven Development
● Writing tests before you write the code that’s being tested. Your test would fail at first, and you’ll know you’ve finished implementing a task when this test passes.
● Tests can check for all the different scenarios and edge cases you can think of, before even starting to write your function
● When refactoring or adding to your code, tests help you rest assured that the rest of your code didn't break while you were making those changes.
● Tests also helps ensure that your function behavior is repeatable, regardless of external parameters, such as hardware and time.

4. Logging
● Logging is the process of recording messages to describe events that have occurred while running your software.
● Good Log messages
- Be professional and clear
- Be concise and use normal capitalization
- Choose the appropriate level for logging
- Provide any useful information
- More information on where, when, how, etc. this occurred would be useful for debugging.

5. Code Review
● Code reviews benefit everyone in a team to promote best programming practices and prepare code for production
- Catch errors, Ensure readability, Check standards are met, Share knowledge among teams
- Is the code clean and modular?
- Is the code efficient?
- Is documentation effective?
- is the code well tested?
- is the logging effective?
- Use a code linter
- Explain issues and make suggestions
- Keep your comments objective
- Provide code examples
